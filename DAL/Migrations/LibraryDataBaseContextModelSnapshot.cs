// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(LibraryDataBaseContext))]
    partial class LibraryDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorBiography")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = new Guid("94c6f173-72ed-4e9a-89f5-d61a611de2dd"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Semenov A.P."
                        },
                        new
                        {
                            AuthorId = new Guid("b41d9e9b-80ee-4fa5-bc26-1098847f622f"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Fedorov Y.I."
                        },
                        new
                        {
                            AuthorId = new Guid("4d0b7f16-8ea1-4d62-a63a-02fec3a8e0aa"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Ivanov I.P."
                        },
                        new
                        {
                            AuthorId = new Guid("37185335-bab6-4d2f-b7b4-8a454327dc21"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Sidorov S.A."
                        },
                        new
                        {
                            AuthorId = new Guid("f13b3ba0-52eb-474e-b9f1-cd6857771d98"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Logkin A.Z."
                        },
                        new
                        {
                            AuthorId = new Guid("85691dc6-7a56-49c9-b310-998acab7f9f4"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Vilkin V.A."
                        },
                        new
                        {
                            AuthorId = new Guid("e2134267-1183-42fe-be17-0f7e38973b00"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Petrov P.P."
                        },
                        new
                        {
                            AuthorId = new Guid("fb599382-3096-4f33-bc61-c18eefb9950f"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Smirnov A.A."
                        },
                        new
                        {
                            AuthorId = new Guid("cf6413aa-a908-4ce0-a0fe-4afb4ac0d594"),
                            AuthorBiography = "...Text...",
                            AuthorName = "Pavlov P.A."
                        });
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookFileAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("PublishingHouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("YearOfPublishing")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublishingHouseId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("0201e414-a277-44b3-a673-34d59d722c5e"),
                            AuthorId = new Guid("94c6f173-72ed-4e9a-89f5-d61a611de2dd"),
                            BookFileAddress = "BookLibrary/Black sea.txt",
                            BookName = "Black sea",
                            PublishingHouseId = new Guid("e1ad8ea8-6019-4250-893d-41372a755c05"),
                            Rating = 3,
                            YearOfPublishing = "2008"
                        },
                        new
                        {
                            BookId = new Guid("0183e953-f44f-42c0-8cca-b0475b1f2218"),
                            AuthorId = new Guid("b41d9e9b-80ee-4fa5-bc26-1098847f622f"),
                            BookFileAddress = "BookLibrary/Нello cat.txt",
                            BookName = "Нello cat",
                            PublishingHouseId = new Guid("35b6fdea-c2aa-4edf-af6e-655aa1eb06a5"),
                            Rating = 5,
                            YearOfPublishing = "2010"
                        },
                        new
                        {
                            BookId = new Guid("93345979-d3c9-4255-90ef-541a8f937a73"),
                            AuthorId = new Guid("4d0b7f16-8ea1-4d62-a63a-02fec3a8e0aa"),
                            BookFileAddress = "BookLibrary/Black dog.txt",
                            BookName = "Black dog",
                            PublishingHouseId = new Guid("5a8f4495-ac8f-4ecc-beb2-58409180073b"),
                            Rating = 0,
                            YearOfPublishing = "2001"
                        },
                        new
                        {
                            BookId = new Guid("57c42200-905e-44cf-982f-7a70fb8d04ff"),
                            AuthorId = new Guid("37185335-bab6-4d2f-b7b4-8a454327dc21"),
                            BookFileAddress = "BookLibrary/Happy bird.txt",
                            BookName = "Happy bird",
                            PublishingHouseId = new Guid("e40037b1-36b2-4671-bd1d-f0784e1299bf"),
                            Rating = 2,
                            YearOfPublishing = "1994"
                        },
                        new
                        {
                            BookId = new Guid("fd5dd762-8765-412b-83a7-c02a27ed858a"),
                            AuthorId = new Guid("f13b3ba0-52eb-474e-b9f1-cd6857771d98"),
                            BookFileAddress = "BookLibrary/Little snake.txt",
                            BookName = "Little snake",
                            PublishingHouseId = new Guid("5a8f4495-ac8f-4ecc-beb2-58409180073b"),
                            Rating = 5,
                            YearOfPublishing = "2009"
                        },
                        new
                        {
                            BookId = new Guid("dd095794-2af3-4845-b2ee-51ab0c151e2c"),
                            AuthorId = new Guid("85691dc6-7a56-49c9-b310-998acab7f9f4"),
                            BookFileAddress = "BookLibrary/Merry.txt",
                            BookName = "Merry",
                            PublishingHouseId = new Guid("e40037b1-36b2-4671-bd1d-f0784e1299bf"),
                            Rating = 4,
                            YearOfPublishing = "2012"
                        },
                        new
                        {
                            BookId = new Guid("b9c9bcfc-2c37-4718-8e16-978f06359f43"),
                            AuthorId = new Guid("e2134267-1183-42fe-be17-0f7e38973b00"),
                            BookFileAddress = "BookLibrary/New spring.txt",
                            BookName = "New spring",
                            PublishingHouseId = new Guid("35b6fdea-c2aa-4edf-af6e-655aa1eb06a5"),
                            Rating = 4,
                            YearOfPublishing = "2005"
                        },
                        new
                        {
                            BookId = new Guid("166fd39a-0f80-4efd-80bf-d7907492222b"),
                            AuthorId = new Guid("fb599382-3096-4f33-bc61-c18eefb9950f"),
                            BookFileAddress = "BookLibrary/Square World.txt",
                            BookName = "Square World",
                            PublishingHouseId = new Guid("e1ad8ea8-6019-4250-893d-41372a755c05"),
                            Rating = 5,
                            YearOfPublishing = "2015"
                        });
                });

            modelBuilder.Entity("DAL.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ApplicationUserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserLastName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserYearsOld")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("c7a480cc-327a-45c2-8fb4-db77aee70cf5"),
                            AccessFailedCount = 0,
                            ApplicationUserRoleId = new Guid("12354898-7456-3215-4895-123654879878"),
                            ConcurrencyStamp = "094d6b96-29a3-417b-9a7d-9712ddbf5104",
                            Email = "pupkin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "095-987-35-67",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserFirstName = "Vova",
                            UserLastName = "Pupkin",
                            UserLogin = "Pupkin@gmail.com",
                            UserPassword = "1111",
                            UserYearsOld = "19"
                        },
                        new
                        {
                            UserId = new Guid("657bf850-9f8f-44c8-8057-b152c4aaa15e"),
                            AccessFailedCount = 0,
                            ApplicationUserRoleId = new Guid("12359876-5423-1564-8957-8215647acdfa"),
                            ConcurrencyStamp = "8f6c7d63-ceb1-455d-8632-dbd42c563419",
                            Email = "petrov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "095-987-00-12",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserFirstName = "Sergey",
                            UserLastName = "Petrov",
                            UserLogin = "Petrov@gmail.com",
                            UserPassword = "2222",
                            UserYearsOld = "31"
                        },
                        new
                        {
                            UserId = new Guid("b2be8bd2-bcf3-4749-9788-f92170689b74"),
                            AccessFailedCount = 0,
                            ApplicationUserRoleId = new Guid("a75489d7-8542-315f-f961-a254892c8a32"),
                            ConcurrencyStamp = "91a5f5d8-4ea2-4114-9355-cc270c8bdd51",
                            Email = "ivanov@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "095-989-11-11",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserFirstName = "Taras",
                            UserLastName = "Ivanov",
                            UserLogin = "Ivanov@gmail.com",
                            UserPassword = "3333",
                            UserYearsOld = "52"
                        });
                });

            modelBuilder.Entity("DAL.Models.IdentityModels.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("RoleId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("12354898-7456-3215-4895-123654879878"),
                            ConcurrencyStamp = "8da1d239-128e-4e03-a840-1a89f0c0b2f5",
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("a75489d7-8542-315f-f961-a254892c8a32"),
                            ConcurrencyStamp = "74dcd55d-8253-4839-974c-f92794d5e873",
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = new Guid("a7548337-8541-515f-f961-a25489212a32"),
                            ConcurrencyStamp = "0bfdf3f1-f591-466b-b14a-4d64bc16231c",
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            RoleName = "SuperUser"
                        },
                        new
                        {
                            RoleId = new Guid("12359876-5423-1564-8957-8215647acdfa"),
                            ConcurrencyStamp = "f2116151-fd5c-43e4-acc8-61d5faa32069",
                            Id = new Guid("00000000-0000-0000-0000-000000000000"),
                            RoleName = "Moderator"
                        });
                });

            modelBuilder.Entity("DAL.Models.PublishingHouse", b =>
                {
                    b.Property<Guid>("PublishingHouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublishingHouseEmail")
                        .HasColumnType("nvarchar(35)")
                        .HasMaxLength(35);

                    b.Property<string>("PublishingHouseInfo")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PublishingHouseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PublishingHouseTellNamber")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("PublishingHouseId");

                    b.ToTable("PublishingHouses");

                    b.HasData(
                        new
                        {
                            PublishingHouseId = new Guid("e40037b1-36b2-4671-bd1d-f0784e1299bf"),
                            PublishingHouseEmail = "NewWord@gmail.com",
                            PublishingHouseInfo = "...Text...",
                            PublishingHouseName = "New word",
                            PublishingHouseTellNamber = "+38 (095) 111-11-11"
                        },
                        new
                        {
                            PublishingHouseId = new Guid("e1ad8ea8-6019-4250-893d-41372a755c05"),
                            PublishingHouseEmail = "PenPen@gmail.com",
                            PublishingHouseInfo = "...Text...",
                            PublishingHouseName = "Pen and pensile",
                            PublishingHouseTellNamber = "+38 (095) 222-22-22"
                        },
                        new
                        {
                            PublishingHouseId = new Guid("5a8f4495-ac8f-4ecc-beb2-58409180073b"),
                            PublishingHouseEmail = "absde@gmail.com",
                            PublishingHouseInfo = "...Text...",
                            PublishingHouseName = "ABSDE",
                            PublishingHouseTellNamber = "+38 (095) 333-33-33"
                        },
                        new
                        {
                            PublishingHouseId = new Guid("35b6fdea-c2aa-4edf-af6e-655aa1eb06a5"),
                            PublishingHouseEmail = "hbooks@gmail.com",
                            PublishingHouseInfo = "...Text...",
                            PublishingHouseName = "Hape books",
                            PublishingHouseTellNamber = "+38 (095) 999-99-99"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Models.Book", b =>
                {
                    b.HasOne("DAL.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.PublishingHouse", "PublishingHouse")
                        .WithMany("Books")
                        .HasForeignKey("PublishingHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Models.IdentityModels.ApplicationUser", b =>
                {
                    b.HasOne("DAL.Models.IdentityModels.ApplicationUserRole", "ApplicationUserRole")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationUserRoleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DAL.Models.IdentityModels.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DAL.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DAL.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("DAL.Models.IdentityModels.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DAL.Models.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
